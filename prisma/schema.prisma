// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("USER")
  orders    Order[]
  createdAt DateTime @default(now())
}

model Product {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  description String
  price       Float
  currency    String?
  inStock     Boolean     @default(true)
  image       String // just 1 image for now
  images      String[] // more if needed
  rating      Float?
  reviewCount Int?
  asin        String?     @unique
  brand       String?
  categories  String[] // you can normalize later if needed
  sourceUrl   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  String?
  OrderItem   OrderItem[]
}

model Category {
  id       String    @id @default(uuid())
  name     String
  products Product[]
}

model Order {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  total     Float
  status    String      @default("PENDING")
  items     OrderItem[]
  createdAt DateTime    @default(now())
}

model OrderItem {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  quantity  Int
}
